#!/usr/bin/env python3

# retrieves the plain text log of a given CodeBuild run

import json
import os
import re
import subprocess
import sys


def usage():
    print("Usage: awslogcat (<log-group-name:log-stream-name>|<log-url>)")


def parse_input(input):
    if input == None:
        usage()
        sys.exit(1)

    if not ":" in input:
        print("expected format <log-group-name:log-stream-name>", file=sys.stderr)
        sys.exit(1)

    match = re.search(r"([a-zA-Z-]+):([a-f0-9-]+)", input)
    return match.groups()


def is_aws_authenticated():
    return os.getenv("AWS_PROFILE", None) == "devops"


def get_log_events(log_group_name, log_stream_name, next_token=None):
    # TODO use api/library?
    args = [
        "aws",
        "logs",
        "get-log-events",
        "--log-group-name",
        f"/aws/codebuild/{log_group_name}",
        "--log-stream-name",
        log_stream_name,
        "--start-from-head",
    ]

    if next_token != None:
        args.append("--next-token")
        args.append(next_token)

    try:
        log_events = subprocess.run(args, capture_output=True, check=True)
        return json.loads(log_events.stdout)
    except Exception as ex:
        raise RuntimeError(ex.stderr)


def get_all_log_events(group, stream):
    class LogStreamIterator:
        def __init__(self, group, stream):
            self.group = group
            self.stream = stream
            self.next = None
            self.done = False

        def __iter__(self):
            return self

        def __next__(self):
            if self.done:
                raise StopIteration

            data = get_log_events(self.group, self.stream, self.next)

            # given the same token passed in, this is the end of the stream
            if data["nextForwardToken"] != self.next:
                self.next = data["nextForwardToken"]
            else:
                self.done = True

            return data

    return LogStreamIterator(group, stream)


def main(input=None):
    [log_group, log_stream] = parse_input(input)

    # TODO is there a better way to assert that we can access the logs?
    if not is_aws_authenticated():
        print("not logged in to aws - run `sso devops`", file=sys.stderr)
        sys.exit(1)

    try:
        for data in get_all_log_events(log_group, log_stream):
            for event in data["events"]:
                print(event["message"], end="")
    except Exception as ex:
        print(f"Fatal error ocurred: {ex}", file=sys.stderr)
        sys.exit(1)


main(*sys.argv[1:])
# main("ncinoocr-ci-build-devops:c50e8b5c-c38d-4c29-ba6f-2d2932a60eed")
# main(
#     "https://console.aws.amazon.com/codesuite/codebuild/726849041453/projects/ncinoocr-package-create-devops/build/ncinoocr-package-create-devops:f2df23cb-854f-44bc-a4ef-b3220d7f3029?region=us-east-1"
# )
